{
    "collab_server" : "",
    "contents" : "function (object, scope, scale = 0, direction = c(\"both\", \"backward\", \n                                                  \"forward\"), trace = 1, keep = NULL, steps = 1000, k = 2, \n          ...) \n{\n  mydeviance <- function(x, ...) {\n    dev <- deviance(x)\n    if (!is.null(dev)) \n      dev\n    else extractAIC(x, k = 0)[2L]\n  }\n  cut.string <- function(string) {\n    if (length(string) > 1L) \n      string[-1L] <- paste0(\"\\n\", string[-1L])\n    string\n  }\n  re.arrange <- function(keep) {\n    namr <- names(k1 <- keep[[1L]])\n    namc <- names(keep)\n    nc <- length(keep)\n    nr <- length(k1)\n    array(unlist(keep, recursive = FALSE), c(nr, nc), list(namr, \n                                                           namc))\n  }\n  step.results <- function(models, fit, object, usingCp = FALSE) {\n    change <- sapply(models, \"[[\", \"change\")\n    rd <- sapply(models, \"[[\", \"deviance\")\n    dd <- c(NA, abs(diff(rd)))\n    rdf <- sapply(models, \"[[\", \"df.resid\")\n    ddf <- c(NA, diff(rdf))\n    AIC <- sapply(models, \"[[\", \"AIC\")\n    heading <- c(\"Stepwise Model Path \\nAnalysis of Deviance Table\", \n                 \"\\nInitial Model:\", deparse(formula(object)), \"\\nFinal Model:\", \n                 deparse(formula(fit)), \"\\n\")\n    aod <- data.frame(Step = I(change), Df = ddf, Deviance = dd, \n                      `Resid. Df` = rdf, `Resid. Dev` = rd, AIC = AIC, \n                      check.names = FALSE)\n    if (usingCp) {\n      cn <- colnames(aod)\n      cn[cn == \"AIC\"] <- \"Cp\"\n      colnames(aod) <- cn\n    }\n    attr(aod, \"heading\") <- heading\n    fit$anova <- aod\n    fit\n  }\n  Terms <- terms(object)\n  object$call$formula <- object$formula <- Terms\n  md <- missing(direction)\n  direction <- match.arg(direction)\n  backward <- direction == \"both\" | direction == \"backward\"\n  forward <- direction == \"both\" | direction == \"forward\"\n  if (missing(scope)) {\n    fdrop <- numeric()\n    fadd <- attr(Terms, \"factors\")\n    if (md) \n      forward <- FALSE\n  }\n  else {\n    if (is.list(scope)) {\n      fdrop <- if (!is.null(fdrop <- scope$lower)) \n        attr(terms(update.formula(object, fdrop)), \"factors\")\n      else numeric()\n      fadd <- if (!is.null(fadd <- scope$upper)) \n        attr(terms(update.formula(object, fadd)), \"factors\")\n    }\n    else {\n      fadd <- if (!is.null(fadd <- scope)) \n        attr(terms(update.formula(object, scope)), \"factors\")\n      fdrop <- numeric()\n    }\n  }\n  models <- vector(\"list\", steps)\n  if (!is.null(keep)) \n    keep.list <- vector(\"list\", steps)\n  n <- nobs(object, use.fallback = TRUE)\n  fit <- object\n  bAIC <- extractAIC(fit, scale, k = k, ...)\n  edf <- bAIC[1L]\n  bAIC <- bAIC[2L]\n  if (is.na(bAIC)) \n    stop(\"AIC is not defined for this model, so 'step' cannot proceed\")\n  if (bAIC == -Inf) \n    stop(\"AIC is -infinity for this model, so 'step' cannot proceed\")\n  nm <- 1\n  if (trace) {\n    cat(\"Start:  AIC=\", format(round(bAIC, 2)), \"\\n\", cut.string(deparse(formula(fit))), \n        \"\\n\\n\", sep = \"\")\n    flush.console()\n  }\n  models[[nm]] <- list(deviance = mydeviance(fit), df.resid = n - \n                         edf, change = \"\", AIC = bAIC)\n  if (!is.null(keep)) \n    keep.list[[nm]] <- keep(fit, bAIC)\n  usingCp <- FALSE\n  while (steps > 0) {\n    steps <- steps - 1\n    AIC <- bAIC\n    ffac <- attr(Terms, \"factors\")\n    scope <- factor.scope(ffac, list(add = fadd, drop = fdrop))\n    aod <- NULL\n    change <- NULL\n    if (backward && length(scope$drop)) {\n      aod <- drop1(fit, scope$drop, scale = scale, trace = trace, \n                   k = k, ...)\n      rn <- row.names(aod)\n      row.names(aod) <- c(rn[1L], paste(\"-\", rn[-1L], sep = \" \"))\n      if (any(aod$Df == 0, na.rm = TRUE)) {\n        zdf <- aod$Df == 0 & !is.na(aod$Df)\n        change <- rev(rownames(aod)[zdf])[1L]\n      }\n    }\n    if (is.null(change)) {\n      if (forward && length(scope$add)) {\n        aodf <- add1(fit, scope$add, scale = scale, trace = trace, \n                     k = k, ...)\n        rn <- row.names(aodf)\n        row.names(aodf) <- c(rn[1L], paste(\"+\", rn[-1L], \n                                           sep = \" \"))\n        aod <- if (is.null(aod)) \n          aodf\n        else rbind(aod, aodf[-1, , drop = FALSE])\n      }\n      attr(aod, \"heading\") <- NULL\n      nzdf <- if (!is.null(aod$Df)) \n        aod$Df != 0 | is.na(aod$Df)\n      aod <- aod[nzdf, ]\n      if (is.null(aod) || ncol(aod) == 0) \n        break\n      nc <- match(c(\"Cp\", \"AIC\"), names(aod))\n      nc <- nc[!is.na(nc)][1L]\n      o <- order(aod[, nc])\n      if (trace) \n        print(aod[o, ])\n      if (o[1L] == 1) \n        break\n      change <- rownames(aod)[o[1L]]\n    }\n    usingCp <- match(\"Cp\", names(aod), 0L) > 0L\n    fit <- update(fit, paste(\"~ .\", change), evaluate = FALSE)\n    fit <- eval.parent(fit)\n    nnew <- nobs(fit, use.fallback = TRUE)\n    if (all(is.finite(c(n, nnew))) && nnew != n) \n      stop(\"number of rows in use has changed: remove missing values?\")\n    Terms <- terms(fit)\n    bAIC <- extractAIC(fit, scale, k = k, ...)\n    edf <- bAIC[1L]\n    bAIC <- bAIC[2L]\n    if (trace) {\n      cat(\"\\nStep:  AIC=\", format(round(bAIC, 2)), \"\\n\", \n          cut.string(deparse(formula(fit))), \"\\n\\n\", sep = \"\")\n      flush.console()\n    }\n    if (bAIC >= AIC + 1e-07) \n      break\n    nm <- nm + 1\n    models[[nm]] <- list(deviance = mydeviance(fit), df.resid = n - \n                           edf, change = change, AIC = bAIC)\n    if (!is.null(keep)) \n      keep.list[[nm]] <- keep(fit, bAIC)\n  }\n  if (!is.null(keep)) \n    fit$keep <- re.arrange(keep.list[seq(nm)])\n  step.results(models = models[seq(nm)], fit, object, usingCp)\n}",
    "created" : 1490762831704.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "1808952244",
    "id" : "2517F828",
    "lastKnownWriteTime" : 7017490166182847091,
    "last_content_update" : 1490762833797,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}